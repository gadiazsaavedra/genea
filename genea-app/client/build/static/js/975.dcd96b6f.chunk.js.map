{"version":3,"file":"static/js/975.dcd96b6f.chunk.js","mappings":"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","sources":["services/mediaService.js","components/MediaUpload/MediaUpload.js","components/MediaGallery/MediaGallery.js","pages/MediaManagement/MediaManagement.js","services/api.js","services/personService.js"],"sourcesContent":["import api from './api';\nimport { supabase } from '../config/supabase.config';\n\n// Servicio para gestionar medios (fotos y documentos)\nconst mediaService = {\n  // Subir foto de perfil\n  uploadProfilePhoto: async (personId, file) => {\n    try {\n      const formData = new FormData();\n      formData.append('profilePhoto', file);\n      \n      const response = await api.post(`/media/profilePhoto/${personId}`, formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  },\n\n  // Subir archivos multimedia\n  uploadMedia: async (personId, files, descriptions = [], fileTypes = []) => {\n    try {\n      const formData = new FormData();\n      \n      // Añadir cada archivo al FormData\n      files.forEach(file => {\n        formData.append('files', file);\n      });\n      \n      // Añadir descripciones si existen\n      if (descriptions.length > 0) {\n        descriptions.forEach((description, index) => {\n          formData.append('descriptions', description);\n        });\n      }\n      \n      // Añadir tipos de archivo si existen\n      if (fileTypes.length > 0) {\n        fileTypes.forEach((type, index) => {\n          formData.append('fileTypes', type);\n        });\n      }\n      \n      const response = await api.post(`/media/${personId}`, formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  },\n\n  // Obtener archivos multimedia de una persona\n  getPersonMedia: async (personId) => {\n    try {\n      const response = await api.get(`/media/${personId}`);\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  },\n\n  // Eliminar un archivo multimedia\n  deleteMedia: async (mediaId) => {\n    try {\n      const response = await api.delete(`/media/${mediaId}`);\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  },\n  \n  // Subir archivo directamente a Supabase Storage\n  uploadToStorage: async (file, folder, fileName) => {\n    try {\n      const fileExt = file.name.split('.').pop();\n      const filePath = `${folder}/${fileName || Math.random().toString(36).substring(2)}.${fileExt}`;\n      \n      const { data, error } = await supabase.storage\n        .from('genea-media')\n        .upload(filePath, file, {\n          cacheControl: '3600',\n          upsert: false\n        });\n      \n      if (error) throw error;\n      \n      // Obtener URL pública\n      const { data: urlData } = supabase.storage\n        .from('genea-media')\n        .getPublicUrl(filePath);\n      \n      return {\n        path: filePath,\n        url: urlData.publicUrl\n      };\n    } catch (error) {\n      throw error;\n    }\n  },\n  \n  // Eliminar archivo de Supabase Storage\n  deleteFromStorage: async (filePath) => {\n    try {\n      const { error } = await supabase.storage\n        .from('genea-media')\n        .remove([filePath]);\n      \n      if (error) throw error;\n      return true;\n    } catch (error) {\n      throw error;\n    }\n  }\n};\n\nexport default mediaService;","import React, { useState } from 'react';\nimport mediaService from '../../services/mediaService';\nimport './MediaUpload.css';\n\nconst MediaUpload = ({ personId, type = 'photos', onUploadComplete }) => {\n  const [files, setFiles] = useState([]);\n  const [captions, setCaptions] = useState([]);\n  const [titles, setTitles] = useState([]);\n  const [types, setTypes] = useState([]);\n  const [uploading, setUploading] = useState(false);\n  const [progress, setProgress] = useState(0);\n  const [error, setError] = useState(null);\n  const [preview, setPreview] = useState([]);\n\n  const handleFileChange = (e) => {\n    const selectedFiles = Array.from(e.target.files);\n    setFiles(selectedFiles);\n    \n    // Generar previsualizaciones\n    const newPreviews = selectedFiles.map(file => {\n      return {\n        file,\n        url: URL.createObjectURL(file)\n      };\n    });\n    setPreview(newPreviews);\n    \n    // Inicializar captions/titles/types con valores vacíos\n    if (type === 'photos') {\n      setCaptions(new Array(selectedFiles.length).fill(''));\n    } else if (type === 'documents') {\n      setTitles(new Array(selectedFiles.length).fill(''));\n      setTypes(new Array(selectedFiles.length).fill('Otro'));\n    }\n  };\n\n  const handleCaptionChange = (index, value) => {\n    const newCaptions = [...captions];\n    newCaptions[index] = value;\n    setCaptions(newCaptions);\n  };\n\n  const handleTitleChange = (index, value) => {\n    const newTitles = [...titles];\n    newTitles[index] = value;\n    setTitles(newTitles);\n  };\n\n  const handleTypeChange = (index, value) => {\n    const newTypes = [...types];\n    newTypes[index] = value;\n    setTypes(newTypes);\n  };\n\n  const handleUpload = async () => {\n    if (files.length === 0) return;\n    \n    setUploading(true);\n    setProgress(0);\n    setError(null);\n    \n    try {\n      let response;\n      \n      // Simular progreso de carga\n      const progressInterval = setInterval(() => {\n        setProgress(prev => {\n          if (prev >= 90) {\n            clearInterval(progressInterval);\n            return 90;\n          }\n          return prev + 10;\n        });\n      }, 300);\n      \n      if (type === 'profilePhoto') {\n        response = await mediaService.uploadProfilePhoto(personId, files[0]);\n      } else if (type === 'photos') {\n        response = await mediaService.uploadPhotos(personId, files, captions);\n      } else if (type === 'documents') {\n        response = await mediaService.uploadDocuments(personId, files, titles, types);\n      }\n      \n      clearInterval(progressInterval);\n      setProgress(100);\n      \n      // Limpiar previsualizaciones\n      preview.forEach(p => URL.revokeObjectURL(p.url));\n      \n      // Resetear el estado\n      setTimeout(() => {\n        setFiles([]);\n        setCaptions([]);\n        setTitles([]);\n        setTypes([]);\n        setPreview([]);\n        setUploading(false);\n        setProgress(0);\n        \n        // Notificar al componente padre\n        if (onUploadComplete) {\n          onUploadComplete(response);\n        }\n      }, 1000);\n    } catch (err) {\n      console.error('Error uploading files:', err);\n      setError('Error al subir los archivos. Por favor, inténtalo de nuevo.');\n      setUploading(false);\n    }\n  };\n\n  const documentTypes = [\n    'Certificado de nacimiento',\n    'Certificado de matrimonio',\n    'Certificado de defunción',\n    'Documento de identidad',\n    'Fotografía histórica',\n    'Carta',\n    'Testamento',\n    'Otro'\n  ];\n\n  return (\n    <div className=\"media-upload\">\n      <div className=\"upload-header\">\n        <h3>\n          {type === 'profilePhoto' && 'Subir foto de perfil'}\n          {type === 'photos' && 'Subir fotos'}\n          {type === 'documents' && 'Subir documentos'}\n        </h3>\n      </div>\n      \n      <div className=\"upload-content\">\n        <div className=\"file-input-container\">\n          <input\n            type=\"file\"\n            id=\"file-input\"\n            onChange={handleFileChange}\n            multiple={type !== 'profilePhoto'}\n            accept={type === 'documents' ? \".pdf,.doc,.docx,.txt\" : \"image/*\"}\n            disabled={uploading}\n          />\n          <label htmlFor=\"file-input\" className=\"file-input-label\">\n            {files.length > 0 ? `${files.length} archivo(s) seleccionado(s)` : 'Seleccionar archivos'}\n          </label>\n        </div>\n        \n        {preview.length > 0 && (\n          <div className=\"preview-container\">\n            {preview.map((item, index) => (\n              <div key={index} className=\"preview-item\">\n                {item.file.type.startsWith('image/') ? (\n                  <img src={item.url} alt={`Preview ${index}`} className=\"preview-image\" />\n                ) : (\n                  <div className=\"document-preview\">\n                    <span className=\"document-icon\">📄</span>\n                    <span className=\"document-name\">{item.file.name}</span>\n                  </div>\n                )}\n                \n                {type === 'photos' && (\n                  <input\n                    type=\"text\"\n                    placeholder=\"Descripción (opcional)\"\n                    value={captions[index] || ''}\n                    onChange={(e) => handleCaptionChange(index, e.target.value)}\n                    disabled={uploading}\n                    className=\"caption-input\"\n                  />\n                )}\n                \n                {type === 'documents' && (\n                  <>\n                    <input\n                      type=\"text\"\n                      placeholder=\"Título del documento\"\n                      value={titles[index] || ''}\n                      onChange={(e) => handleTitleChange(index, e.target.value)}\n                      disabled={uploading}\n                      className=\"title-input\"\n                    />\n                    <select\n                      value={types[index] || 'Otro'}\n                      onChange={(e) => handleTypeChange(index, e.target.value)}\n                      disabled={uploading}\n                      className=\"type-select\"\n                    >\n                      {documentTypes.map(docType => (\n                        <option key={docType} value={docType}>{docType}</option>\n                      ))}\n                    </select>\n                  </>\n                )}\n              </div>\n            ))}\n          </div>\n        )}\n        \n        {error && <div className=\"upload-error\">{error}</div>}\n        \n        {uploading && (\n          <div className=\"progress-container\">\n            <div className=\"progress-bar\">\n              <div className=\"progress-fill\" style={{ width: `${progress}%` }}></div>\n            </div>\n            <div className=\"progress-text\">{progress}%</div>\n          </div>\n        )}\n        \n        <div className=\"upload-actions\">\n          <button\n            className=\"upload-button\"\n            onClick={handleUpload}\n            disabled={files.length === 0 || uploading}\n          >\n            {uploading ? 'Subiendo...' : 'Subir'}\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default MediaUpload;","import React, { useState } from 'react';\nimport mediaService from '../../services/mediaService';\nimport './MediaGallery.css';\n\nconst MediaGallery = ({ person, mediaType = 'photos', onMediaDelete }) => {\n  const [selectedMedia, setSelectedMedia] = useState(null);\n  const [deleting, setDeleting] = useState(false);\n  const [error, setError] = useState(null);\n\n  const media = mediaType === 'photos' ? person.photos || [] : person.documents || [];\n\n  const handleMediaClick = (item) => {\n    setSelectedMedia(item);\n  };\n\n  const handleCloseDetail = () => {\n    setSelectedMedia(null);\n  };\n\n  const handleDeleteMedia = async (mediaId) => {\n    if (window.confirm('¿Estás seguro de que deseas eliminar este archivo?')) {\n      setDeleting(true);\n      setError(null);\n      \n      try {\n        await mediaService.deleteMedia(person._id, mediaType, mediaId);\n        \n        // Cerrar el detalle si está abierto\n        if (selectedMedia && selectedMedia._id === mediaId) {\n          setSelectedMedia(null);\n        }\n        \n        // Notificar al componente padre\n        if (onMediaDelete) {\n          onMediaDelete(mediaId);\n        }\n      } catch (err) {\n        console.error('Error deleting media:', err);\n        setError('Error al eliminar el archivo. Por favor, inténtalo de nuevo.');\n      } finally {\n        setDeleting(false);\n      }\n    }\n  };\n\n  const formatDate = (dateString) => {\n    if (!dateString) return '';\n    return new Date(dateString).toLocaleDateString();\n  };\n\n  const isImage = (url) => {\n    const extension = url.split('.').pop().toLowerCase();\n    return ['jpg', 'jpeg', 'png', 'gif', 'webp'].includes(extension);\n  };\n\n  const getDocumentIcon = (url) => {\n    const extension = url.split('.').pop().toLowerCase();\n    \n    switch (extension) {\n      case 'pdf':\n        return '📄';\n      case 'doc':\n      case 'docx':\n        return '📝';\n      case 'xls':\n      case 'xlsx':\n        return '📊';\n      case 'ppt':\n      case 'pptx':\n        return '📑';\n      default:\n        return '📁';\n    }\n  };\n\n  return (\n    <div className=\"media-gallery\">\n      {error && <div className=\"gallery-error\">{error}</div>}\n      \n      {media.length === 0 ? (\n        <div className=\"no-media\">\n          {mediaType === 'photos' ? 'No hay fotos disponibles' : 'No hay documentos disponibles'}\n        </div>\n      ) : (\n        <div className=\"gallery-grid\">\n          {media.map((item) => (\n            <div \n              key={item._id} \n              className=\"gallery-item\"\n              onClick={() => handleMediaClick(item)}\n            >\n              {mediaType === 'photos' || isImage(item.url) ? (\n                <div className=\"gallery-image-container\">\n                  <img src={item.url} alt={item.caption || 'Imagen'} className=\"gallery-image\" />\n                </div>\n              ) : (\n                <div className=\"gallery-document\">\n                  <span className=\"document-icon\">{getDocumentIcon(item.url)}</span>\n                  <span className=\"document-title\">{item.title || 'Documento'}</span>\n                </div>\n              )}\n              \n              <div className=\"gallery-item-info\">\n                {mediaType === 'photos' ? (\n                  <span className=\"gallery-caption\">{item.caption || 'Sin descripción'}</span>\n                ) : (\n                  <span className=\"gallery-title\">{item.title || 'Sin título'}</span>\n                )}\n                <span className=\"gallery-date\">{formatDate(item.date)}</span>\n              </div>\n            </div>\n          ))}\n        </div>\n      )}\n      \n      {selectedMedia && (\n        <div className=\"media-detail-overlay\" onClick={handleCloseDetail}>\n          <div className=\"media-detail-container\" onClick={(e) => e.stopPropagation()}>\n            <div className=\"media-detail-header\">\n              <h3>\n                {mediaType === 'photos' ? 'Foto' : 'Documento'}\n              </h3>\n              <button className=\"close-button\" onClick={handleCloseDetail}>×</button>\n            </div>\n            \n            <div className=\"media-detail-content\">\n              {mediaType === 'photos' || isImage(selectedMedia.url) ? (\n                <img \n                  src={selectedMedia.url} \n                  alt={selectedMedia.caption || 'Imagen'} \n                  className=\"detail-image\" \n                />\n              ) : (\n                <div className=\"detail-document\">\n                  <span className=\"document-icon large\">{getDocumentIcon(selectedMedia.url)}</span>\n                  <a \n                    href={selectedMedia.url} \n                    target=\"_blank\" \n                    rel=\"noopener noreferrer\"\n                    className=\"document-link\"\n                  >\n                    Ver documento\n                  </a>\n                </div>\n              )}\n              \n              <div className=\"media-info\">\n                {mediaType === 'photos' && selectedMedia.caption && (\n                  <div className=\"info-row\">\n                    <span className=\"info-label\">Descripción:</span>\n                    <span className=\"info-value\">{selectedMedia.caption}</span>\n                  </div>\n                )}\n                \n                {mediaType === 'documents' && (\n                  <>\n                    {selectedMedia.title && (\n                      <div className=\"info-row\">\n                        <span className=\"info-label\">Título:</span>\n                        <span className=\"info-value\">{selectedMedia.title}</span>\n                      </div>\n                    )}\n                    \n                    {selectedMedia.type && (\n                      <div className=\"info-row\">\n                        <span className=\"info-label\">Tipo:</span>\n                        <span className=\"info-value\">{selectedMedia.type}</span>\n                      </div>\n                    )}\n                  </>\n                )}\n                \n                {selectedMedia.date && (\n                  <div className=\"info-row\">\n                    <span className=\"info-label\">Fecha:</span>\n                    <span className=\"info-value\">{formatDate(selectedMedia.date)}</span>\n                  </div>\n                )}\n              </div>\n            </div>\n            \n            <div className=\"media-detail-actions\">\n              <button \n                className=\"delete-button\"\n                onClick={() => handleDeleteMedia(selectedMedia._id)}\n                disabled={deleting}\n              >\n                {deleting ? 'Eliminando...' : 'Eliminar'}\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default MediaGallery;","import React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport MediaUpload from '../../components/MediaUpload/MediaUpload';\nimport MediaGallery from '../../components/MediaGallery/MediaGallery';\nimport personService from '../../services/personService';\nimport './MediaManagement.css';\n\nconst MediaManagement = () => {\n  const { personId } = useParams();\n  const navigate = useNavigate();\n  const [person, setPerson] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [activeTab, setActiveTab] = useState('photos');\n  const [showUploadModal, setShowUploadModal] = useState(false);\n  const [uploadType, setUploadType] = useState('photos');\n\n  useEffect(() => {\n    const fetchPerson = async () => {\n      try {\n        setLoading(true);\n        \n        // Intentar cargar datos reales desde la API\n        try {\n          const response = await personService.getPersonById(personId);\n          \n          if (response.success && response.data) {\n            setPerson(response.data);\n            setLoading(false);\n            return;\n          }\n        } catch (apiError) {\n          console.warn('Error al cargar datos de la API, usando datos de ejemplo:', apiError);\n        }\n        \n        // Si falla la API, usar datos de ejemplo\n        setTimeout(() => {\n          const mockPerson = {\n            _id: personId,\n            fullName: 'Juan Pérez',\n            birthDate: '1950-05-15',\n            birthPlace: 'Madrid, España',\n            isAlive: true,\n            profilePhoto: 'https://via.placeholder.com/150',\n            photos: [\n              {\n                _id: 'photo1',\n                url: 'https://via.placeholder.com/500x300?text=Foto+1',\n                caption: 'Vacaciones en la playa',\n                date: '2020-07-15'\n              },\n              {\n                _id: 'photo2',\n                url: 'https://via.placeholder.com/500x300?text=Foto+2',\n                caption: 'Reunión familiar',\n                date: '2019-12-25'\n              },\n              {\n                _id: 'photo3',\n                url: 'https://via.placeholder.com/500x300?text=Foto+3',\n                caption: 'Graduación',\n                date: '2015-06-30'\n              }\n            ],\n            documents: [\n              {\n                _id: 'doc1',\n                url: 'https://via.placeholder.com/100x100?text=PDF',\n                title: 'Certificado de nacimiento',\n                type: 'Certificado de nacimiento',\n                date: '2010-01-10'\n              },\n              {\n                _id: 'doc2',\n                url: 'https://via.placeholder.com/100x100?text=DOC',\n                title: 'Carta familiar',\n                type: 'Carta',\n                date: '1995-03-22'\n              }\n            ]\n          };\n          setPerson(mockPerson);\n          setLoading(false);\n        }, 800);\n      } catch (err) {\n        setError('Error al cargar los datos de la persona');\n        setLoading(false);\n        console.error('Error fetching person data:', err);\n      }\n    };\n\n    fetchPerson();\n  }, [personId]);\n\n  const handleTabChange = (tab) => {\n    setActiveTab(tab);\n  };\n\n  const handleOpenUpload = (type) => {\n    setUploadType(type);\n    setShowUploadModal(true);\n  };\n\n  const handleCloseUpload = () => {\n    setShowUploadModal(false);\n  };\n\n  const handleUploadComplete = (response) => {\n    // Actualizar el estado con los nuevos medios\n    if (response && response.success) {\n      setPerson(prevPerson => {\n        if (uploadType === 'profilePhoto') {\n          return {\n            ...prevPerson,\n            profilePhoto: response.data.fileUrl\n          };\n        } else if (uploadType === 'photos') {\n          return {\n            ...prevPerson,\n            photos: [...(prevPerson.photos || []), ...response.data.uploadedPhotos]\n          };\n        } else if (uploadType === 'documents') {\n          return {\n            ...prevPerson,\n            documents: [...(prevPerson.documents || []), ...response.data.uploadedDocuments]\n          };\n        }\n        return prevPerson;\n      });\n      \n      setShowUploadModal(false);\n    }\n  };\n\n  const handleMediaDelete = (mediaId) => {\n    // Actualizar el estado eliminando el medio\n    setPerson(prevPerson => {\n      if (activeTab === 'photos') {\n        return {\n          ...prevPerson,\n          photos: prevPerson.photos.filter(photo => photo._id !== mediaId)\n        };\n      } else if (activeTab === 'documents') {\n        return {\n          ...prevPerson,\n          documents: prevPerson.documents.filter(doc => doc._id !== mediaId)\n        };\n      }\n      return prevPerson;\n    });\n  };\n\n  if (loading) {\n    return <div className=\"loading-container\">Cargando información...</div>;\n  }\n\n  if (error) {\n    return <div className=\"error-container\">{error}</div>;\n  }\n\n  return (\n    <div className=\"media-management-container\">\n      <div className=\"media-header\">\n        <div className=\"person-info\">\n          <div className=\"person-photo\">\n            {person.profilePhoto ? (\n              <img src={person.profilePhoto} alt={person.fullName} />\n            ) : (\n              <div className=\"no-photo\">\n                {person.fullName.charAt(0)}\n              </div>\n            )}\n          </div>\n          <div className=\"person-details\">\n            <h1>{person.fullName}</h1>\n            <p>{person.birthDate ? new Date(person.birthDate).getFullYear() : ''} - {!person.isAlive && person.deathDate ? new Date(person.deathDate).getFullYear() : ''}</p>\n          </div>\n        </div>\n        \n        <div className=\"media-actions\">\n          <button \n            className=\"btn btn-outline\"\n            onClick={() => handleOpenUpload('profilePhoto')}\n          >\n            Cambiar foto de perfil\n          </button>\n          <button \n            className=\"btn btn-primary\"\n            onClick={() => navigate(`/persons/${personId}`)}\n          >\n            Ver perfil completo\n          </button>\n        </div>\n      </div>\n      \n      <div className=\"media-tabs\">\n        <button \n          className={`tab-button ${activeTab === 'photos' ? 'active' : ''}`}\n          onClick={() => handleTabChange('photos')}\n        >\n          Fotos ({person.photos ? person.photos.length : 0})\n        </button>\n        <button \n          className={`tab-button ${activeTab === 'documents' ? 'active' : ''}`}\n          onClick={() => handleTabChange('documents')}\n        >\n          Documentos ({person.documents ? person.documents.length : 0})\n        </button>\n      </div>\n      \n      <div className=\"media-content\">\n        <div className=\"media-toolbar\">\n          <button \n            className=\"btn btn-primary\"\n            onClick={() => handleOpenUpload(activeTab)}\n          >\n            {activeTab === 'photos' ? 'Subir fotos' : 'Subir documentos'}\n          </button>\n        </div>\n        \n        <div className=\"media-gallery-container\">\n          <MediaGallery \n            person={person} \n            mediaType={activeTab}\n            onMediaDelete={handleMediaDelete}\n          />\n        </div>\n      </div>\n      \n      {showUploadModal && (\n        <div className=\"upload-modal-overlay\">\n          <div className=\"upload-modal-content\">\n            <div className=\"upload-modal-header\">\n              <h3>\n                {uploadType === 'profilePhoto' && 'Cambiar foto de perfil'}\n                {uploadType === 'photos' && 'Subir fotos'}\n                {uploadType === 'documents' && 'Subir documentos'}\n              </h3>\n              <button className=\"close-button\" onClick={handleCloseUpload}>×</button>\n            </div>\n            <div className=\"upload-modal-body\">\n              <MediaUpload \n                personId={personId}\n                type={uploadType}\n                onUploadComplete={handleUploadComplete}\n              />\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default MediaManagement;","import axios from 'axios';\nimport { supabase } from '../config/supabase.config';\n\n// Configuración base de axios\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\n// Crear instancia de axios con configuración base\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Interceptor para añadir el token de autenticación a las solicitudes\napi.interceptors.request.use(\n  async (config) => {\n    // Obtener la sesión actual de Supabase\n    const { data } = await supabase.auth.getSession();\n    const session = data.session;\n    \n    if (session) {\n      config.headers['Authorization'] = `Bearer ${session.access_token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Interceptor para manejar errores de respuesta\napi.interceptors.response.use(\n  (response) => {\n    return response;\n  },\n  (error) => {\n    // Manejar errores de autenticación (401)\n    if (error.response && error.response.status === 401) {\n      // Cerrar sesión en Supabase\n      supabase.auth.signOut();\n      window.location.href = '/login';\n    }\n    return Promise.reject(error);\n  }\n);\n\nexport default api;","import api from './api';\nimport { supabase } from '../config/supabase.config';\n\n// Servicio para gestionar personas\nconst personService = {\n  // Obtener todas las personas\n  getAllPersons: async (params = {}) => {\n    try {\n      const response = await api.get('/persons', { params });\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  },\n\n  // Obtener personas de una familia\n  getFamilyPersons: async (familyId, params = {}) => {\n    try {\n      const response = await api.get('/persons', { \n        params: { \n          ...params, \n          familyId \n        } \n      });\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  },\n\n  // Obtener una persona por ID\n  getPersonById: async (id) => {\n    try {\n      const response = await api.get(`/persons/${id}`);\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  },\n\n  // Crear una nueva persona\n  createPerson: async (personData) => {\n    try {\n      const response = await api.post('/persons', personData);\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  },\n\n  // Actualizar una persona existente\n  updatePerson: async (id, personData) => {\n    try {\n      const response = await api.put(`/persons/${id}`, personData);\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  },\n\n  // Eliminar una persona\n  deletePerson: async (id) => {\n    try {\n      const response = await api.delete(`/persons/${id}`);\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  },\n\n  // Añadir una relación entre personas\n  addRelation: async (relationData) => {\n    try {\n      const response = await api.post('/persons/relation', relationData);\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  },\n\n  // Eliminar una relación entre personas\n  removeRelation: async (relationData) => {\n    try {\n      const response = await api.delete('/persons/relation', { data: relationData });\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  },\n\n  // Obtener el árbol genealógico de una persona\n  getPersonTree: async (id, params = {}) => {\n    try {\n      const response = await api.get(`/persons/${id}/tree`, { params });\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  },\n  \n  // Buscar personas por nombre\n  searchPersons: async (query, familyId) => {\n    try {\n      const response = await api.get('/persons', { \n        params: { \n          query, \n          familyId \n        } \n      });\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  },\n  \n  // Obtener relaciones de una persona\n  getPersonRelationships: async (personId) => {\n    try {\n      const response = await api.get(`/persons/${personId}/relationships`);\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  }\n};\n\nexport default personService;"],"names":["uploadProfilePhoto","async","personId","file","formData","FormData","append","api","post","headers","data","error","uploadMedia","files","descriptions","arguments","length","undefined","fileTypes","forEach","description","index","type","getPersonMedia","get","deleteMedia","delete","mediaId","uploadToStorage","folder","fileName","fileExt","name","split","pop","filePath","Math","random","toString","substring","supabase","storage","from","upload","cacheControl","upsert","urlData","getPublicUrl","path","url","publicUrl","deleteFromStorage","remove","_ref","onUploadComplete","setFiles","useState","captions","setCaptions","titles","setTitles","types","setTypes","uploading","setUploading","progress","setProgress","setError","preview","setPreview","documentTypes","_jsxs","className","children","_jsx","id","onChange","e","selectedFiles","Array","target","newPreviews","map","URL","createObjectURL","fill","multiple","accept","disabled","htmlFor","item","startsWith","src","alt","placeholder","value","handleCaptionChange","newCaptions","_Fragment","handleTitleChange","newTitles","handleTypeChange","newTypes","docType","style","width","onClick","response","progressInterval","setInterval","prev","clearInterval","mediaService","uploadPhotos","uploadDocuments","p","revokeObjectURL","setTimeout","err","console","person","mediaType","onMediaDelete","selectedMedia","setSelectedMedia","deleting","setDeleting","media","photos","documents","handleCloseDetail","formatDate","dateString","Date","toLocaleDateString","isImage","extension","toLowerCase","includes","getDocumentIcon","handleMediaClick","caption","title","date","_id","stopPropagation","href","rel","window","confirm","handleDeleteMedia","MediaManagement","useParams","navigate","useNavigate","setPerson","loading","setLoading","activeTab","setActiveTab","showUploadModal","setShowUploadModal","uploadType","setUploadType","useEffect","personService","getPersonById","success","apiError","warn","fullName","birthDate","birthPlace","isAlive","profilePhoto","fetchPerson","handleTabChange","tab","handleOpenUpload","charAt","getFullYear","deathDate","MediaGallery","prevPerson","filter","photo","doc","handleCloseUpload","MediaUpload","fileUrl","uploadedPhotos","uploadedDocuments","axios","create","baseURL","process","interceptors","request","use","auth","getSession","session","config","access_token","Promise","reject","status","signOut","location","getAllPersons","params","getFamilyPersons","familyId","createPerson","personData","updatePerson","put","deletePerson","addRelation","relationData","removeRelation","getPersonTree","searchPersons","query","getPersonRelationships"],"sourceRoot":""}