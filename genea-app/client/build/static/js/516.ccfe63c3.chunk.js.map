{"version":3,"file":"static/js/516.ccfe63c3.chunk.js","mappings":"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","sources":["components/PersonForm/PersonForm.js","pages/PersonManagement/PersonManagement.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './PersonForm.css';\n\nconst PersonForm = ({ person, onSubmit, onCancel }) => {\n  const [formData, setFormData] = useState({\n    fullName: person?.fullName || '',\n    birthDate: person?.birthDate ? new Date(person.birthDate).toISOString().split('T')[0] : '',\n    birthPlace: person?.birthPlace || '',\n    isAlive: person?.isAlive !== undefined ? person.isAlive : true,\n    deathDate: person?.deathDate ? new Date(person.deathDate).toISOString().split('T')[0] : '',\n    deathPlace: person?.deathPlace || '',\n    occupation: person?.occupation || '',\n    bio: person?.bio || ''\n  });\n\n  const [errors, setErrors] = useState({});\n\n  const handleChange = (e) => {\n    const { name, value, type, checked } = e.target;\n    setFormData({\n      ...formData,\n      [name]: type === 'checkbox' ? checked : value\n    });\n  };\n\n  const validate = () => {\n    const newErrors = {};\n    if (!formData.fullName.trim()) {\n      newErrors.fullName = 'El nombre es obligatorio';\n    }\n    \n    if (!formData.isAlive && !formData.deathDate) {\n      newErrors.deathDate = 'La fecha de fallecimiento es obligatoria si la persona no está viva';\n    }\n    \n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (validate()) {\n      onSubmit(formData);\n    }\n  };\n\n  return (\n    <form className=\"person-form\" onSubmit={handleSubmit}>\n      <h2>{person ? 'Editar Persona' : 'Añadir Persona'}</h2>\n      \n      <div className=\"form-group\">\n        <label htmlFor=\"fullName\">Nombre completo *</label>\n        <input\n          type=\"text\"\n          id=\"fullName\"\n          name=\"fullName\"\n          value={formData.fullName}\n          onChange={handleChange}\n          className={errors.fullName ? 'error' : ''}\n        />\n        {errors.fullName && <span className=\"error-message\">{errors.fullName}</span>}\n      </div>\n      \n      <div className=\"form-group\">\n        <label htmlFor=\"birthDate\">Fecha de nacimiento</label>\n        <input\n          type=\"date\"\n          id=\"birthDate\"\n          name=\"birthDate\"\n          value={formData.birthDate}\n          onChange={handleChange}\n        />\n      </div>\n      \n      <div className=\"form-group\">\n        <label htmlFor=\"birthPlace\">Lugar de nacimiento</label>\n        <input\n          type=\"text\"\n          id=\"birthPlace\"\n          name=\"birthPlace\"\n          value={formData.birthPlace}\n          onChange={handleChange}\n        />\n      </div>\n      \n      <div className=\"form-group checkbox\">\n        <input\n          type=\"checkbox\"\n          id=\"isAlive\"\n          name=\"isAlive\"\n          checked={formData.isAlive}\n          onChange={handleChange}\n        />\n        <label htmlFor=\"isAlive\">Está vivo/a</label>\n      </div>\n      \n      {!formData.isAlive && (\n        <>\n          <div className=\"form-group\">\n            <label htmlFor=\"deathDate\">Fecha de fallecimiento</label>\n            <input\n              type=\"date\"\n              id=\"deathDate\"\n              name=\"deathDate\"\n              value={formData.deathDate}\n              onChange={handleChange}\n              className={errors.deathDate ? 'error' : ''}\n            />\n            {errors.deathDate && <span className=\"error-message\">{errors.deathDate}</span>}\n          </div>\n          \n          <div className=\"form-group\">\n            <label htmlFor=\"deathPlace\">Lugar de fallecimiento</label>\n            <input\n              type=\"text\"\n              id=\"deathPlace\"\n              name=\"deathPlace\"\n              value={formData.deathPlace}\n              onChange={handleChange}\n            />\n          </div>\n        </>\n      )}\n      \n      <div className=\"form-group\">\n        <label htmlFor=\"occupation\">Ocupación</label>\n        <input\n          type=\"text\"\n          id=\"occupation\"\n          name=\"occupation\"\n          value={formData.occupation}\n          onChange={handleChange}\n        />\n      </div>\n      \n      <div className=\"form-group\">\n        <label htmlFor=\"bio\">Biografía</label>\n        <textarea\n          id=\"bio\"\n          name=\"bio\"\n          value={formData.bio}\n          onChange={handleChange}\n          rows=\"4\"\n        />\n      </div>\n      \n      <div className=\"form-actions\">\n        <button type=\"button\" className=\"cancel-button\" onClick={onCancel}>\n          Cancelar\n        </button>\n        <button type=\"submit\" className=\"submit-button\">\n          {person ? 'Actualizar' : 'Crear'}\n        </button>\n      </div>\n    </form>\n  );\n};\n\nexport default PersonForm;","import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport PersonForm from '../../components/PersonForm/PersonForm';\nimport './PersonManagement.css';\n\nconst PersonManagement = () => {\n  const [persons, setPersons] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [showForm, setShowForm] = useState(false);\n  const [editingPerson, setEditingPerson] = useState(null);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [filteredPersons, setFilteredPersons] = useState([]);\n\n  useEffect(() => {\n    const fetchPersons = async () => {\n      try {\n        // Aquí se cargarían las personas desde la API\n        // Por ahora usamos datos de ejemplo\n        setTimeout(() => {\n          const mockPersons = [\n            {\n              _id: '1',\n              fullName: 'Juan Pérez',\n              birthDate: '1950-05-15',\n              birthPlace: 'Madrid, España',\n              isAlive: true,\n              occupation: 'Ingeniero (jubilado)'\n            },\n            {\n              _id: '2',\n              fullName: 'María Pérez',\n              birthDate: '1975-08-20',\n              birthPlace: 'Barcelona, España',\n              isAlive: true,\n              occupation: 'Médico'\n            },\n            {\n              _id: '3',\n              fullName: 'Pedro Pérez',\n              birthDate: '1978-12-03',\n              birthPlace: 'Valencia, España',\n              isAlive: true,\n              occupation: 'Abogado'\n            },\n            {\n              _id: '4',\n              fullName: 'Carlos Gómez',\n              birthDate: '2000-03-10',\n              birthPlace: 'Madrid, España',\n              isAlive: true,\n              occupation: 'Estudiante'\n            },\n            {\n              _id: '5',\n              fullName: 'Laura Gómez',\n              birthDate: '2002-11-05',\n              birthPlace: 'Madrid, España',\n              isAlive: true,\n              occupation: 'Estudiante'\n            }\n          ];\n          setPersons(mockPersons);\n          setFilteredPersons(mockPersons);\n          setLoading(false);\n        }, 600);\n      } catch (error) {\n        console.error('Error al cargar personas:', error);\n        setLoading(false);\n      }\n    };\n\n    fetchPersons();\n  }, []);\n\n  useEffect(() => {\n    if (searchTerm) {\n      const filtered = persons.filter(person => \n        person.fullName.toLowerCase().includes(searchTerm.toLowerCase())\n      );\n      setFilteredPersons(filtered);\n    } else {\n      setFilteredPersons(persons);\n    }\n  }, [searchTerm, persons]);\n\n  const handleAddPerson = () => {\n    setEditingPerson(null);\n    setShowForm(true);\n  };\n\n  const handleEditPerson = (person) => {\n    setEditingPerson(person);\n    setShowForm(true);\n  };\n\n  const handleDeletePerson = async (personId) => {\n    if (window.confirm('¿Estás seguro de que deseas eliminar esta persona?')) {\n      try {\n        // Aquí se eliminaría la persona a través de la API\n        // Por ahora simulamos la eliminación\n        setPersons(persons.filter(p => p._id !== personId));\n        setFilteredPersons(filteredPersons.filter(p => p._id !== personId));\n      } catch (error) {\n        console.error('Error al eliminar persona:', error);\n      }\n    }\n  };\n\n  const handleFormSubmit = async (formData) => {\n    try {\n      if (editingPerson) {\n        // Actualizar persona existente\n        const updatedPersons = persons.map(p => \n          p._id === editingPerson._id ? { ...p, ...formData } : p\n        );\n        setPersons(updatedPersons);\n        setFilteredPersons(updatedPersons);\n      } else {\n        // Crear nueva persona\n        const newPerson = {\n          _id: Date.now().toString(), // Simulamos un ID\n          ...formData\n        };\n        setPersons([...persons, newPerson]);\n        setFilteredPersons([...filteredPersons, newPerson]);\n      }\n      setShowForm(false);\n    } catch (error) {\n      console.error('Error al guardar persona:', error);\n    }\n  };\n\n  const handleFormCancel = () => {\n    setShowForm(false);\n  };\n\n  const formatDate = (dateString) => {\n    if (!dateString) return 'Desconocida';\n    return new Date(dateString).toLocaleDateString();\n  };\n\n  return (\n    <div className=\"person-management-container\">\n      <div className=\"person-management-header\">\n        <h1>Gestión de Personas</h1>\n        <button className=\"btn btn-primary\" onClick={handleAddPerson}>\n          Añadir Persona\n        </button>\n      </div>\n\n      <div className=\"search-bar\">\n        <input\n          type=\"text\"\n          placeholder=\"Buscar persona...\"\n          value={searchTerm}\n          onChange={(e) => setSearchTerm(e.target.value)}\n        />\n      </div>\n\n      {loading ? (\n        <div className=\"loading\">Cargando personas...</div>\n      ) : (\n        <div className=\"persons-table-container\">\n          <table className=\"persons-table\">\n            <thead>\n              <tr>\n                <th>Nombre</th>\n                <th>Fecha de nacimiento</th>\n                <th>Lugar de nacimiento</th>\n                <th>Estado</th>\n                <th>Ocupación</th>\n                <th>Acciones</th>\n              </tr>\n            </thead>\n            <tbody>\n              {filteredPersons.length > 0 ? (\n                filteredPersons.map(person => (\n                  <tr key={person._id}>\n                    <td>{person.fullName}</td>\n                    <td>{formatDate(person.birthDate)}</td>\n                    <td>{person.birthPlace || 'Desconocido'}</td>\n                    <td>{person.isAlive ? 'Vivo' : 'Fallecido'}</td>\n                    <td>{person.occupation || 'Desconocida'}</td>\n                    <td className=\"actions-cell\">\n                      <button \n                        className=\"action-btn view-btn\" \n                        title=\"Ver detalles\"\n                        onClick={() => {/* Ver detalles */}}\n                      >\n                        👁️\n                      </button>\n                      <button \n                        className=\"action-btn edit-btn\" \n                        title=\"Editar\"\n                        onClick={() => handleEditPerson(person)}\n                      >\n                        ✏️\n                      </button>\n                      <button \n                        className=\"action-btn delete-btn\" \n                        title=\"Eliminar\"\n                        onClick={() => handleDeletePerson(person._id)}\n                      >\n                        🗑️\n                      </button>\n                    </td>\n                  </tr>\n                ))\n              ) : (\n                <tr>\n                  <td colSpan=\"6\" className=\"no-results\">\n                    No se encontraron personas\n                  </td>\n                </tr>\n              )}\n            </tbody>\n          </table>\n        </div>\n      )}\n\n      {showForm && (\n        <div className=\"modal-overlay\">\n          <div className=\"modal-content\">\n            <PersonForm\n              person={editingPerson}\n              onSubmit={handleFormSubmit}\n              onCancel={handleFormCancel}\n            />\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default PersonManagement;"],"names":["_ref","person","onSubmit","onCancel","formData","setFormData","useState","fullName","birthDate","Date","toISOString","split","birthPlace","isAlive","undefined","deathDate","deathPlace","occupation","bio","errors","setErrors","handleChange","e","name","value","type","checked","target","_jsxs","className","preventDefault","validate","newErrors","trim","Object","keys","length","children","_jsx","htmlFor","id","onChange","_Fragment","rows","onClick","PersonManagement","persons","setPersons","loading","setLoading","showForm","setShowForm","editingPerson","setEditingPerson","searchTerm","setSearchTerm","filteredPersons","setFilteredPersons","useEffect","async","setTimeout","mockPersons","_id","error","console","fetchPersons","filtered","filter","toLowerCase","includes","handleAddPerson","placeholder","map","dateString","toLocaleDateString","title","handleEditPerson","window","confirm","p","personId","handleDeletePerson","colSpan","PersonForm","updatedPersons","newPerson","now","toString","handleFormCancel"],"sourceRoot":""}