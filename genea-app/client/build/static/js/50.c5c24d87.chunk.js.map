{"version":3,"file":"static/js/50.c5c24d87.chunk.js","mappings":"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","sources":["pages/FamilyManagement/FamilyManagement.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport './FamilyManagement.css';\n\nconst FamilyManagement = () => {\n  const [families, setFamilies] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [showForm, setShowForm] = useState(false);\n  const [editingFamily, setEditingFamily] = useState(null);\n  const [formData, setFormData] = useState({\n    name: '',\n    description: ''\n  });\n\n  useEffect(() => {\n    const fetchFamilies = async () => {\n      try {\n        // Aquí se cargarían las familias desde la API\n        // Por ahora usamos datos de ejemplo\n        setTimeout(() => {\n          const mockFamilies = [\n            {\n              _id: '1',\n              name: 'Familia Pérez',\n              description: 'Familia originaria de Madrid',\n              membersCount: 12,\n              createdAt: '2023-01-15',\n              isAdmin: true\n            },\n            {\n              _id: '2',\n              name: 'Familia García',\n              description: 'Rama familiar de Barcelona',\n              membersCount: 8,\n              createdAt: '2023-02-20',\n              isAdmin: true\n            },\n            {\n              _id: '3',\n              name: 'Familia López',\n              description: 'Familia extendida con raíces en Valencia',\n              membersCount: 15,\n              createdAt: '2023-03-05',\n              isAdmin: false\n            }\n          ];\n          setFamilies(mockFamilies);\n          setLoading(false);\n        }, 600);\n      } catch (error) {\n        console.error('Error al cargar familias:', error);\n        setLoading(false);\n      }\n    };\n\n    fetchFamilies();\n  }, []);\n\n  const handleAddFamily = () => {\n    setEditingFamily(null);\n    setFormData({\n      name: '',\n      description: ''\n    });\n    setShowForm(true);\n  };\n\n  const handleEditFamily = (family) => {\n    setEditingFamily(family);\n    setFormData({\n      name: family.name,\n      description: family.description\n    });\n    setShowForm(true);\n  };\n\n  const handleDeleteFamily = async (familyId) => {\n    if (window.confirm('¿Estás seguro de que deseas eliminar esta familia? Esta acción no se puede deshacer.')) {\n      try {\n        // Aquí se eliminaría la familia a través de la API\n        // Por ahora simulamos la eliminación\n        setFamilies(families.filter(f => f._id !== familyId));\n      } catch (error) {\n        console.error('Error al eliminar familia:', error);\n      }\n    }\n  };\n\n  const handleFormChange = (e) => {\n    const { name, value } = e.target;\n    setFormData({\n      ...formData,\n      [name]: value\n    });\n  };\n\n  const handleFormSubmit = async (e) => {\n    e.preventDefault();\n    try {\n      if (editingFamily) {\n        // Actualizar familia existente\n        const updatedFamilies = families.map(f => \n          f._id === editingFamily._id ? { ...f, ...formData } : f\n        );\n        setFamilies(updatedFamilies);\n      } else {\n        // Crear nueva familia\n        const newFamily = {\n          _id: Date.now().toString(), // Simulamos un ID\n          ...formData,\n          membersCount: 1,\n          createdAt: new Date().toISOString().split('T')[0],\n          isAdmin: true\n        };\n        setFamilies([...families, newFamily]);\n      }\n      setShowForm(false);\n    } catch (error) {\n      console.error('Error al guardar familia:', error);\n    }\n  };\n\n  const formatDate = (dateString) => {\n    return new Date(dateString).toLocaleDateString();\n  };\n\n  return (\n    <div className=\"family-management-container\">\n      <div className=\"family-management-header\">\n        <h1>Mis Familias</h1>\n        <button className=\"btn btn-primary\" onClick={handleAddFamily}>\n          Crear Nueva Familia\n        </button>\n      </div>\n\n      {loading ? (\n        <div className=\"loading\">Cargando familias...</div>\n      ) : (\n        <div className=\"families-grid\">\n          {families.length > 0 ? (\n            families.map(family => (\n              <div key={family._id} className=\"family-card\">\n                <div className=\"family-card-header\">\n                  <h2>{family.name}</h2>\n                  {family.isAdmin && <span className=\"admin-badge\">Admin</span>}\n                </div>\n                <p className=\"family-description\">{family.description}</p>\n                <div className=\"family-meta\">\n                  <span>{family.membersCount} miembros</span>\n                  <span>Creada: {formatDate(family.createdAt)}</span>\n                </div>\n                <div className=\"family-actions\">\n                  <Link to={`/family/${family._id}/tree`} className=\"btn btn-sm\">\n                    Ver árbol\n                  </Link>\n                  <Link to={`/family/${family._id}/members`} className=\"btn btn-sm btn-outline\">\n                    Miembros\n                  </Link>\n                  {family.isAdmin && (\n                    <>\n                      <button \n                        className=\"btn btn-sm btn-outline\"\n                        onClick={() => handleEditFamily(family)}\n                      >\n                        Editar\n                      </button>\n                      <button \n                        className=\"btn btn-sm btn-danger\"\n                        onClick={() => handleDeleteFamily(family._id)}\n                      >\n                        Eliminar\n                      </button>\n                    </>\n                  )}\n                </div>\n              </div>\n            ))\n          ) : (\n            <div className=\"no-families\">\n              <p>No tienes familias creadas</p>\n              <button className=\"btn btn-primary\" onClick={handleAddFamily}>\n                Crear tu primera familia\n              </button>\n            </div>\n          )}\n        </div>\n      )}\n\n      {showForm && (\n        <div className=\"modal-overlay\">\n          <div className=\"modal-content\">\n            <div className=\"family-form\">\n              <h2>{editingFamily ? 'Editar Familia' : 'Crear Nueva Familia'}</h2>\n              <form onSubmit={handleFormSubmit}>\n                <div className=\"form-group\">\n                  <label htmlFor=\"name\">Nombre de la familia *</label>\n                  <input\n                    type=\"text\"\n                    id=\"name\"\n                    name=\"name\"\n                    value={formData.name}\n                    onChange={handleFormChange}\n                    required\n                  />\n                </div>\n                <div className=\"form-group\">\n                  <label htmlFor=\"description\">Descripción</label>\n                  <textarea\n                    id=\"description\"\n                    name=\"description\"\n                    value={formData.description}\n                    onChange={handleFormChange}\n                    rows=\"4\"\n                  />\n                </div>\n                <div className=\"form-actions\">\n                  <button \n                    type=\"button\" \n                    className=\"btn btn-cancel\"\n                    onClick={() => setShowForm(false)}\n                  >\n                    Cancelar\n                  </button>\n                  <button type=\"submit\" className=\"btn btn-primary\">\n                    {editingFamily ? 'Actualizar' : 'Crear'}\n                  </button>\n                </div>\n              </form>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default FamilyManagement;"],"names":["FamilyManagement","families","setFamilies","useState","loading","setLoading","showForm","setShowForm","editingFamily","setEditingFamily","formData","setFormData","name","description","useEffect","async","setTimeout","_id","membersCount","createdAt","isAdmin","error","console","fetchFamilies","handleAddFamily","handleFormChange","e","value","target","_jsxs","className","children","_jsx","onClick","length","map","family","dateString","Date","toLocaleDateString","Link","to","_Fragment","handleEditFamily","window","confirm","filter","f","familyId","handleDeleteFamily","onSubmit","preventDefault","updatedFamilies","newFamily","now","toString","toISOString","split","htmlFor","type","id","onChange","required","rows"],"sourceRoot":""}